{"version":3,"sources":["components/Questions/Questions.js","components/Options/Options.js","components/Chart/Chart.js","components/data.js","components/Poll/Poll.js","App.js","index.js"],"names":["Questions","question","style","color","font","textAlign","fontWeight","fontSize","margin","Options","selectedOption","options","handleOption","value","onChange","padding","borderRadius","maxWidth","outline","map","item","id","ans","Chart","totVotes","pollResult","votes","Object","values","length","reduce","acc","val","pollData","Math","round","className","keys","idx","role","width","aria-valuenow","aria-valuemin","aria-valuemax","quesAns","ques","Poll","useState","counter","setCounter","setQues","setOption","selectedAns","setSelectedAns","setPollResult","handlePrev","prev","handleNext","useEffect","JSON","parse","localStorage","getItem","e","target","onClick","currResult","storedResults","ansId","setItem","stringify","handleVote","step","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8892b1e.chunk.js","sourcesContent":["const Questions = ({question}) => {\n  const styles = {\n    color: \"blue\",\n    font: \"Lucida Sans\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: \"x-large\",\n    margin: \"1%\"\n  };\n\n  return (\n      <label style={styles}>{question}</label>\n  );\n};\nexport default Questions;","const Options = ({selectedOption, options, handleOption }) => {\n    const styles = {\n        color: \"black\",\n        padding: \"0.5rem 0.5rem\",\n        fontWeight: \"bold\",\n        borderRadius: \"6px\",\n        maxWidth: \"70%\",\n        outline: \"none\",\n        font: \"Lucida Sans\",\n        margin: \"1%\"\n    }\n    \n    return(\n         <select value={selectedOption} onChange={handleOption} style={styles}>\n             {options.map((item) => (\n                 <option key={item.id} value={item.id}>\n                    {item.id} : {item.ans}\n                 </option>\n             ))}\n         </select>\n    )\n}\nexport default Options;","import \"./Chart.css\";\n\nconst Chart = ({ options, pollResult }) => {\n  let totVotes;\n  let votes = Object.values(pollResult);\n  if (votes.length > 0) {\n    totVotes = votes.reduce((acc, val) => acc + val);\n  }\n  let pollData = {};\n  options.map((value) => {\n    pollData[`${value.id}: ${value.ans}`] = Math.round(\n      (pollResult[value.id] / totVotes) * 100\n    );\n  });\n  return (\n    <div className=\"col-md-12 col-xs-12 col-sm-12\">\n      {Object.keys(pollData).map((item, idx) => (\n        <>\n          <div>{item}</div>\n          <div className=\"progress\" key={idx}>\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated\"\n              role=\"progressbar\"\n              style={{ width: `${pollData[item]}%` }}\n              aria-valuenow={pollData[item]}\n              aria-valuemin=\"20\"\n              aria-valuemax=\"100\"\n            >\n              {pollData[item]}%\n            </div>\n          </div>\n        </>\n      ))}\n    </div>\n  );\n};\nexport default Chart;\n","export const quesAns = [\n  {\n    id: \"poll2q1\",\n    ques: \"Which superpower would you like to have?\",\n    options: [\n     {id: \"a\", ans: \"Mind reading\"},\n     {id: \"b\", ans: \"Invisibility\"}, \n     {id: \"c\", ans: \"Teleportation\"},\n     {id: \"d\", ans: \"Flying\"},\n    ],\n  },\n  {\n    id: \"poll2q2\",\n    ques: \"Do you multitask when attending a meeting online?\",\n    options: [\n      {id: \"a\", ans: \"Yes, I’m guilty\"},\n      {id: \"b\", ans: \"No, I’m 100% focused\"}, \n      {id: \"c\", ans: \"Sometimes\"}\n    ],\n  }\n];\n","import { useEffect, useState } from \"react\";\nimport Questions from \"../Questions/Questions\";\nimport Options from \"../Options/Options\";\nimport Chart from \"../Chart/Chart\";\nimport { quesAns } from \"../data\";\nimport \"./Poll.css\";\n\nconst Poll = () => {\n  const [counter, setCounter] = useState(0);\n  const [ques, setQues] = useState(quesAns[counter].ques);\n  const [options, setOption] = useState(quesAns[counter].options);\n  const [selectedAns, setSelectedAns] = useState(\n    quesAns[counter].options[0].id\n  );\n  const [pollResult, setPollResult] = useState(null);\n\n  function handleVote() {\n    let currResult = {};\n    const storedResults = JSON.parse(localStorage.getItem(quesAns[counter].id));\n    if (storedResults) {\n      currResult = { ...storedResults };\n      for (let ansId in storedResults) {\n        if (ansId === selectedAns) {\n          currResult[ansId] += 1;\n        }\n      }\n    } else {\n      let optionIds = options.map((item) => {\n        return item.id;\n      });\n      optionIds.map((val) => {\n        if (val === selectedAns) currResult[val] = 1;\n        else currResult[val] = 0;\n      });\n    }\n    localStorage.setItem(quesAns[counter].id, JSON.stringify(currResult));\n    setPollResult(currResult);\n  }\n\n  useEffect(() => {\n    setQues(quesAns[counter].ques);\n    setOption(quesAns[counter].options);\n    setSelectedAns(quesAns[counter].options[0].id);\n    setPollResult(JSON.parse(localStorage.getItem(quesAns[counter].id)));\n  }, [counter]);\n\n  function handlePrev() {\n    setCounter((prev) => prev - 1);\n  }\n\n  function handleNext() {\n    setCounter((prev) => prev + 1);\n  }\n\n  function step() {\n    switch (counter) {\n      case 0:\n        return (\n          <div className=\"step middle\">\n            <button className=\"stepButton\" onClick={() => handleNext()}>\n              Next\n            </button>\n          </div>\n        );\n\n      case quesAns.length - 1:\n        return (\n          <div className=\"step middle\">\n            <button className=\"stepButton\" onClick={() => handlePrev()}>\n              Prev\n            </button>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"step side\">\n            <button className=\"stepButton\" onClick={() => handlePrev()}>\n              Prev\n            </button>\n            <button className=\"stepButton\" onClick={() => handleNext()}>\n              Next\n            </button>\n          </div>\n        );\n    }\n  }\n  return (\n    <div className=\"pollContainer col-lg-6 col-md-8 col-11 col-xs-10 col-sm-10\">\n      <Questions question={ques} />\n      <Options\n        options={options}\n        handleOption={(e) => setSelectedAns(e.target.value)}\n        selectedOption={selectedAns}\n      />\n      <button className=\"vote\" onClick={() => handleVote()}>\n        Vote\n      </button>\n      {pollResult ? <Chart options={options} pollResult={pollResult} /> : null} \n      {step()}\n    </div>\n  );\n};\nexport default Poll;\n","import Poll from \"./components/Poll/Poll\"\n\nfunction App() {\n  return (\n  <>\n  <Poll />\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}